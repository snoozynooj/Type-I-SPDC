
# -*- coding: utf-8 -*-
"""
Created on Tue May  2 12:08:47 2023

@author: burto
"""

import numpy as np
import math as mt
import sympy as sym 
import matplotlib.pyplot as plt
from scipy.optimize import fsolve
from scipy.integrate import quad


""" Parameters"""

eo = 8.8541878176E-12 # Electrical permittivity of the vacuum

P = 1E-3 # Pumped power

c=299792458 # Velocity of the light
L = 0.001 # Lenght of the crystal
lp = 532 # Wavelenght of the pump in nm
lam_t = lp
l1 = lp*2 # Wavelenght of the signal and idler in nm

band = 1E-9 # Bandwidth of the Fiber
band =  c / (band)


sigma_p = 0.875E-6  # Hermite-Gauss mode for the pump
sigma_1 = 1.875E-6  # Hermite-Gauss mode for the signal and idler


#%%
 

""" Sellmeier equations for selected MOFs"""

"VURQEF"
# selle =[1.939257624156827 ,0.0046201733565161655 ,134742.8486912627,0.33491150572064055 ,58887.39779184338]
# sello =[2.1475021915246852,0.053489472771176425,123809.63532074595,1.0018224278971701,61503.94989289683]

"ONOCOL01"

# selle =[2.1334087182826034  ,0.020186114832955425 , 141599.75428975158 ,
#         0.623776906026098,74386.52334436034]

# sello =[2.0176250569716565,0.7576661886990735,74373.12169702443,
#         0.021079767099701188 , 140557.65756427593]

"DIXWAJ"

# selle =[1.7783232373198676, 0.5722653646923247, 33446.38215349205 
#         ,0.022346399310137197, 111995.3093201559]

# sello =[1.8947691941920024, 0.6359258224174567, 43593.62331052622 ,
#         0.019881239623018326, 115897.98846865435]


"EGIKUB02-positive"

# selle =[28.58361934928793, 4.678281989258097 ,38777.47397406969, -29.859470549741367, 3901.777720512696]
# sello =[2.1247034822538793, 1.3479529974292561, 64271.73803350773, -0.7838555650189348, 64271.44937753851]


"SAQFUM"

# selle =[1.7904651598466805, 0.05460624769454377, 91607.55007814994, 0.8105872457802059, 39695.810041926314]
# sello =[2.010363328440273, 0.017750282020272998, 103541.8012539858, 0.9268891080565168, 52126.34901563138]


"IMIDZB01"


# selle =[1.6409276310876717, 0.03223158698506867, 65442.877713637296, 0.8306185154607646, 30955.348304207553]
# sello =[1.626875367720352, 0.027472717394730794, 66000.34486210723, 0.7713644531266042, 31002.003558130426]



"JETVOW "

# selle =[1.6151557699503352, 6.797047775595605, 147256.52157161472, -6.599881633983939,  147256.54568566725]
# sello =[37.7792828639067, -28.04335554516492, -1398.2030108441538, -8.068648554586543, -1399.8726462146058]


"SAQFUM"

# selle =[1.7904651598466805, 0.05460624769454377, 91607.55007814994, 0.8105872457802059, 39695.810041926314]
# sello =[2.010363328440273, 0.017750282020272998, 103541.8012539858, 0.9268891080565168, 52126.34901563138]

"HUTZAX01"
# selle =[1.9506247077249423, 0.04715137705501194, 147125.72469734427, 0.736156281563366, 73069.18124700317]
# sello =[1.8316125123106444, 0.03563666377502507, 146407.9011037287, 0.5380899588668341, 72323.59799735252]

"QAMFUF01"

# selle =[2.3297071434970777, 0.7631669713632797, 111356.41996754002, 0.013660312816163625, 234959.3759941976]
# sello =[2.2616312803445866, 0.712052892644223, 99894.22143037003, 0.020050265286093865, 226021.8058987032]


"BEKVOD"

# sello =[1.7373525060510397 ,0.06638627242955507, 94306.0064712162, 0.8939868395752323, 34981.736334657595]
# selle =[1.6981678862394916, 0.9435479433377625, 39007.615296841956, 0.08072651809788102, 95789.49430925158]


"WUJFOW"

# selle =[1.4989126755382198, 0.051375768726868755, 52057.87427313697, 1.0679062576555514,     17915.35072299919]
# sello =[1.5063880234757272, 0.059630633594892554, 52080.607237671225, 1.1375069884991353, 18094.6677718929]

"ECIWAO2"
# name = "ECIWAO2"
# nx = [2.244749370863437, 0.021210878841035327, 249271.630840839, 1.341788542915219, 103697.67847428357]
# ny = [2.2674359820805026, 0.7305737041835006, 93026.7459292061, 0.007188263486725759, 275317.1249668403]
# nz = [1.9356230815936633, 0.647391916399499, 92131.90208764428, 0.015243093049533935, 245775.80021589616]


# sello =[2.244749370863437, 0.021210878841035327, 249271.630840839, 1.341788542915219, 103697.67847428357]
# selle = [1.9356230815936633, 0.647391916399499, 92131.90208764428, 0.015243093049533935, 245775.80021589616]

"RUVBAN"
# name="RUVBAN"
# nx = [1.890485989527627, 0.445934354674558, 51617.383906844494, 0.011347944387600846, 134111.93539515167]
# ny = [2.1167613266381378, 1.0476944643598867, 60670.54013015806, 0.027403703050539584, 127971.86535946309]
# nz = [2.169642433924311, 1.0863421247626117, 65076.08574104012, 0.030305414019025347, 129218.10091242459]


# sello = [2.169642433924311, 1.0863421247626117, 65076.08574104012, 0.030305414019025347, 129218.10091242459]
# selle = [1.890485989527627, 0.445934354674558, 51617.383906844494, 0.011347944387600846, 134111.93539515167]
   
"AQOROP2"
# name = "AQOROP2"

# nx = [2.802842361442532, 0.004111349599221632, 259263.48638758608, 1.6668444730363403, 119747.7488400518]
# ny = [2.311600808110341, 0.6547201800991022, 99024.0849514373, 0.007641837600799524, 260078.63920492862]
# nz = [2.2466349992326973, 0.5306358571265285, 86212.66806255151, 0.005643573472296574, 263802.34610423766]

# sello = [2.802842361442532, 0.004111349599221632, 259263.48638758608, 1.6668444730363403, 119747.7488400518]
# selle = [2.2466349992326973, 0.5306358571265285, 86212.66806255151, 0.005643573472296574, 263802.34610423766]

# sello = [2.802842361442532, 0.004111349599221632, 259263.48638758608, 1.6668444730363403, 119747.7488400518]
# selle = [2.311600808110341, 0.6547201800991022, 99024.0849514373, 0.007641837600799524, 260078.63920492862]

"MOFTIL2"
name = "MOFTIL2"
nx = [1.7989663052680425, 0.5604479801909195, 99824.63793504509, 1.3144374332355626, 37961.82879291918]
ny = [1.7399916301454426, 0.26285885704236384, 106041.41806049037, 0.9907409494670057, 36163.86127135452]
nz = [1.6482007420228795, 0.1728575560603238, 102104.2784739305, 0.9919406829003953, 27910.40849062094]     
 

"switch e-o"
selle = [1.7989663052680425, 0.5604479801909195, 99824.63793504509, 1.3144374332355626, 37961.82879291918]
sello = [1.6482007420228795, 0.1728575560603238, 102104.2784739305, 0.9919406829003953, 27910.40849062094]

# selle = [1.7989663052680425, 0.5604479801909195, 99824.63793504509, 1.3144374332355626, 37961.82879291918]
# sello = [1.7399916301454426, 0.26285885704236384, 106041.41806049037, 0.9907409494670057, 36163.86127135452]



"MIRO101"
# name = 'MIRO101'
# sello =[2.1078,2.5100E-2,1.41489044E5,1.0871,5.62150205E4]
# selle =[1.7833 ,8.9000E-3,1.44323712E5,3.6470E-1,4.96202890E4]


"""MIRO102"""
# name = 'MIRO102'
# sello =[2.1385,1.1527,4.77658824E4,7.6600E-2,1.16666067E5]
# selle =[1.7890 ,5.0300E-2,1.07012455E5,7.4320E-1,3.58417385E4]

"MIRO-103"
# name = 'MIRO103'
# sello =[1.9010,5.1430E-1,5.12308938E4,4.0800E-2,1.57385759E5]
# selle =[2.0731 ,1.2882,5.76235328E4,1.0700E-2,1.59071640E5]


    
def Sell(l, A, B1, C1, B2, C2):
    return mt.sqrt(((A)+(((l**2)*B1)/((l**2)-C1))+(((l**2)*B2)/((l**2)-C2))))

#%%
""" Second-order suceptibility tensor for selected MOFs"""

X2 = np.zeros((3,9))



"VURQEF"
# X2[0][0]=-0.5256E-08
# X2[0][1]= 0.1707E-07
# X2[0][2]=-0.3967E-07
# X2[0][3]= 0.1707E-07 
# X2[0][4]=-0.4710E-08
# X2[0][5]= 0.3925E-01
# X2[0][6]=-0.3967E-07
# X2[0][7]= 0.3925E-01
# X2[0][8]= 0.1776E-06


# X2[1][0]= 0.1856E-07 
# X2[1][1]= 0.6035E-10
# X2[1][2]=-0.3926E-01
# X2[1][3]= 0.6035E-10
# X2[1][4]= 0.2993E-07
# X2[1][5]= -0.2189E-06
# X2[1][6]=-0.3926E-01
# X2[1][7]=-0.3926E-01
# X2[1][8]=-0.2054E-05

# X2[2][0]=-0.1101E-06
# X2[2][1]= 0.3576E-05 
# X2[2][2]= 0.5580E-06
# X2[2][3]= 0.3576E-05
# X2[2][4]=-0.2339E-06
# X2[2][5]= 0.7193E-05 
# X2[2][6]= 0.5580E-06
# X2[2][7]= 0.7193E-05
# X2[2][8]= 0.4799E-06

"EGIKUB02-positive"


# X2[0][0]=-0.6718E-07
# X2[0][1]=-0.1243E-07 
# X2[0][2]=0.9414E-06
# X2[0][3]=-0.1243E-07
# X2[0][4]=0.1675E-08
# X2[0][5]=-0.7239E-02
# X2[0][6]=0.9414E-06
# X2[0][7]=-0.7239E-02   
# X2[0][8]=-0.5003E-06


# X2[1][0]=-0.1043E-07
# X2[1][1]=-0.8643E-08 
# X2[1][2]=0.7240E-02
# X2[1][3]=-0.8643E-08
# X2[1][4]=-0.7695E-07 
# X2[1][5]= 0.5679E-06  
# X2[1][6]=0.7240E-02 
# X2[1][7]=0.5679E-06 
# X2[1][8]=0.5717E-06

# X2[2][0]=-0.3184E-06 
# X2[2][1]=-0.6147E-07
# X2[2][2]=-0.8662E-06
# X2[2][3]= -0.6147E-07
# X2[2][4]= -0.3481E-06
# X2[2][5]=  0.7042E-06
# X2[2][6]=  -0.8662E-06 
# X2[2][7]=0.7042E-06
# X2[2][8]= -0.7494E-05


"DIXWAJ"


# X2[0][0]=-0.1498E-07
# X2[0][1]=-0.2805E-07
# X2[0][2]= 0.2056E-05 
# X2[0][3]=-0.2805E-07 
# X2[0][4]= -0.3751E-07
# X2[0][5]= 0.2866E-01
# X2[0][6]=0.2056E-05
# X2[0][7]= 0.2866E-01  
# X2[0][8]= 0.6911E-06


# X2[1][0]= -0.1938E-07
# X2[1][1]=-0.2442E-07
# X2[1][2]=-0.2866E-01
# X2[1][3]=-0.2442E-07 
# X2[1][4]=0.7065E-08
# X2[1][5]= -0.2133E-06 
# X2[1][6]=-0.2866E-01
# X2[1][7]=-0.2133E-06 
# X2[1][8]=-0.1059E-05

# X2[2][0]=0.2643E-05
# X2[2][1]=0.2689E-05
# X2[2][2]=-0.3811E-06
# X2[2][3]=0.2689E-05
# X2[2][4]=0.5868E-06
# X2[2][5]=-0.3868E-07
# X2[2][6]= -0.3811E-06 
# X2[2][7]= -0.3868E-07
# X2[2][8]=-0.2941E-06



"SAQFUM"



# X2[0][0]=0.9531E-06
# X2[0][1]=0.4182E-06
# X2[0][2]=-0.3592E-05 
# X2[0][3]=0.4182E-06
# X2[0][4]=0.3155E-06 
# X2[0][5]=0.1188E+00
# X2[0][6]=-0.3592E-05
# X2[0][7]=0.1188E+00  
# X2[0][8]=0.9547E-06


# X2[1][0]= 0.4441E-06
# X2[1][1]=0.2853E-06
# X2[1][2]=0.1188E+00
# X2[1][3]=0.2853E-06
# X2[1][4]=0.9390E-06
# X2[1][5]=-0.3166E-05 
# X2[1][6]=0.1188E+00
# X2[1][7]= -0.3166E-05 
# X2[1][8]=0.6855E-06

# X2[2][0]=-0.3753E-05 
# X2[2][1]=0.1322E+00
# X2[2][2]=0.1826E-06 
# X2[2][3]=0.1322E+00
# X2[2][4]=-0.3653E-05
# X2[2][5]= -0.5680E-08
# X2[2][6]= 0.1826E-06 
# X2[2][7]= -0.5680E-08
# X2[2][8]=-0.2471E-05


"HUTZAX01"



# X2[0][0]= -0.7069E-05
# X2[0][1]= -0.2566E+01
# X2[0][2]=0.3370E-05
# X2[0][3]= -0.2566E+01 
# X2[0][4]=0.4816E-05
# X2[0][5]=-0.5368E-01
# X2[0][6]=-0.3370E-05
# X2[0][7]=-0.5368E-01  
# X2[0][8]=0.3067E-05 


# X2[1][0]=-0.2566E+01
# X2[1][1]=0.2742E-05
# X2[1][2]= 0.5368E-01 
# X2[1][3]=0.2742E-05
# X2[1][4]= 0.2566E+01
# X2[1][5]=-0.2644E-05 
# X2[1][6]=0.5368E-01
# X2[1][7]=-0.2644E-05 
# X2[1][8]=0.4123E-05

# X2[2][0]=0.6193E-06
# X2[2][1]=0.4831E-05
# X2[2][2]=-0.4771E-05 
# X2[2][3]=0.4831E-05
# X2[2][4]=-0.2250E-05
# X2[2][5]= -0.4287E-05
# X2[2][6]= -0.4771E-05
# X2[2][7]=-0.4287E-05
# X2[2][8]=0.1825E-04


"ECIWAO"


X2[0][0]= -1.05899999E-05
X2[0][1]= -2.61899996 
X2[0][2]=  0.433499992
X2[0][3]= -2.61899996 
X2[0][4]=  4.18199988E-06 
X2[0][5]= -7.53299973E-05
X2[0][6]=  0.433499992 
X2[0][7]= -7.53299973E-05  
X2[0][8]= -1.63799996E-04 


X2[1][0]=  7.90799999
X2[1][1]= -1.51100003E-05
X2[1][2]=  5.10200007E-05 
X2[1][3]= -1.51100003E-05
X2[1][4]= -9.73099995 
X2[1][5]= -10.6999998  
X2[1][6]=  5.10200007E-05 
X2[1][7]= -10.6999998 
X2[1][8]=  110.099998

X2[2][0]=  7.89300013 
X2[2][1]=  3.46699999E-05 
X2[2][2]=  7.07700019E-05
X2[2][3]=  3.46699999E-05
X2[2][4]=  23.6100006  
X2[2][5]= -53.5699997
X2[2][6]=  7.07700019E-05 
X2[2][7]= -53.5699997
X2[2][8]= -27.5300007 

"AQOROP "


# X2[0][0]=  3.05299997
# X2[0][1]= 5.59900000E-05
# X2[0][2]= 3.43099999 
# X2[0][3]= 5.59900000E-05 
# X2[0][4]= 8.34899998
# X2[0][5]= -3.78100012E-05
# X2[0][6]= 3.43099999  
# X2[0][7]=-3.78100012E-05  
# X2[0][8]=-37.4000015 


# X2[1][0]=1.87900002E-06 
# X2[1][1]=5.50299978 
# X2[1][2]=-8.04299998E-06
# X2[1][3]=5.50299978 
# X2[1][4]=1.87900000E-07
# X2[1][5]=-3.78699994  
# X2[1][6]=-8.04299998E-06
# X2[1][7]=-3.78699994
# X2[1][8]=-7.36699985E-06

# X2[2][0]=-2.26099992
# X2[2][1]=1.09299999E-05
# X2[2][2]=24.4099998 
# X2[2][3]=1.09299999E-05
# X2[2][4]=-6.62300014 
# X2[2][5]=-1.08599997E-05
# X2[2][6]=24.4099998 
# X2[2][7]=-1.08599997E-05
# X2[2][8]=9.11200047


"MOFTIL"


X2[0][0]=  1.22200000 
X2[0][1]= -5.14200019E-06
X2[0][2]= -0.376700014 
X2[0][3]= -5.14200019E-06 
X2[0][4]=  2.94099998 
X2[0][5]=  7.74300020E-07
X2[0][6]= -0.376700014 
X2[0][7]=  7.74300020E-07 
X2[0][8]=  0.594799995  


X2[1][0]=  2.46199988E-07 
X2[1][1]=  2.91300011 
X2[1][2]= -2.79900007E-07 
X2[1][3]=  2.91300011 
X2[1][4]= -1.64800003E-05 
X2[1][5]= -3.88100004  
X2[1][6]= -2.79900007E-07
X2[1][7]= -3.88100004 
X2[1][8]=  3.08799997E-07

X2[2][0]= -0.380299985 
X2[2][1]=  6.11299981E-07
X2[2][2]=  0.268799990
X2[2][3]=  6.11299981E-07
X2[2][4]= -3.98099995
X2[2][5]= -7.63699973E-06 
X2[2][6]=  0.268799990
X2[2][7]= -7.63699973E-06 
X2[2][8]= -0.619599998 


"MIRO101"

# X2[0][0]=-0.7444E-6
# X2[0][1]=-0.1950E-6
# X2[0][2]=-0.9620E0
# X2[0][3]=-0.1950E-6
# X2[0][4]=-0.1363E-6
# X2[0][5]=0.3117
# X2[0][6]=-0.9620
# X2[0][7]=0.3117
# X2[0][8]=-0.3647E-6


# X2[1][0]=-0.3647E-6
# X2[1][1]=-0.2158E-6
# X2[1][2]=0.3117
# X2[1][3]=-0.2158E-6
# X2[1][4]= 0.1484E-5
# X2[1][5]= 0.9620
# X2[1][6]= 0.3117
# X2[1][7]= 0.9620
# X2[1][8]=-0.9620E-6

# X2[2][0]= -0.9390
# X2[2][1]=0.3488
# X2[2][2]=-0.3832E-6
# X2[2][3]=0.3832
# X2[2][4]=0.9390
# X2[2][5]= -0.2951E-6
# X2[2][6]=-0.3832E-6
# X2[2][7]= -0.2951E-6
# X2[2][8]=-0.3841E-5

"MIRO-102"

# X2[0][0]=-0.1091E-2
# X2[0][1]=0.1260E-5
# X2[0][2]=0.3083
# X2[0][3]=0.1260E-5
# X2[0][4]=-0.4203E-3
# X2[0][5]= -0.8498E-6
# X2[0][6]=0.3083
# X2[0][7]=-0.8498E-6
# X2[0][8]=-0.5164E-3


# X2[1][0]=0.7497E-6
# X2[1][1]=-0.4030E-3
# X2[1][2]=-0.1394E-5
# X2[1][3]=-0.4030E-3
# X2[1][4]=0.5244E-5
# X2[1][5]=0.1461
# X2[1][6]=-0.1394E-5
# X2[1][7]=0.1461
# X2[1][8]=-0.6039E-6

# X2[2][0]=0.1818
# X2[2][1]= 0.1122E-6
# X2[2][2]= -0.4601E-3
# X2[2][3]=0.1122E-6
# X2[2][4]=0.9045E-1
# X2[2][5]=0.2294E-6
# X2[2][6]= -0.4601E-3
# X2[2][7]=0.2294E-6
# X2[2][8]=-0.1258E1


"MIRO-103"

# X2[0][0]=0.9707E-05
# X2[0][1]=-0.1621E+00
# X2[0][2]=-0.1984E-04
# X2[0][3]=-0.1621E+00
# X2[0][4]=0.9863E-05
# X2[0][5]=0.1491E-01
# X2[0][6]=-0.1984E-04
# X2[0][7]=0.1491E-01
# X2[0][8]=0.1440E-04


# X2[1][0]=-0.1621E+00
# X2[1][1]=0.2922E-05
# X2[1][2]=-0.1490E-01
# X2[1][3]=0.2922E-05
# X2[1][4]=0.1621E+00
# X2[1][5]=-0.2191E-04
# X2[1][6]=-0.1490E-01
# X2[1][7]=-0.2191E-04
# X2[1][8]=-0.1241E-04

# X2[2][0]=-0.1186E-04
# X2[2][1]= 0.9742E-06
# X2[2][2]=0.1204E-04
# X2[2][3]=0.9742E-06
# X2[2][4]=-0.1261E-04
# X2[2][5]=-0.8635E-05
# X2[2][6]= 0.1204E-04
# X2[2][7]=-0.8635E-05
# X2[2][8]=-0.1010E-04

#%%


no = Sell(lp,*sello) # Ordinary refracive index for the pumped wavelenght
ne = Sell(lp,*selle) # Extraordinary refracive index for the pumped wavelenght

if no > ne:
    type_ = 'negative' 
elif ne > no:
    type_ = 'positive'
     
    
def neff(lam,ang):  # Effective refractive index
    no = Sell(lam,*sello)
    ne = Sell(lam,*selle)
    a = np.cos(ang)**2 / (no*no)
    b = np.sin(ang)**2 / (ne*ne)
    nef = np.sqrt(1/(a+b))
    return nef


def f(x,l_p,l_e,a_c): #  Momentum conservation
    l_o = l_e*l_p/(l_e-l_p)
    if type_=='negative':
        kp = 2*mt.pi*neff(l_p,a_c)/(l_p*1E-9)
        ko = 2*mt.pi*Sell(l_o,*sello)/(l_o*1E-9)
        ke = 2*mt.pi*neff(l_e,a_c-x[1])/(l_e*1E-9)
    if type_=='positive':
        kp = 2*mt.pi*Sell(l_p,*sello)/(l_p*1E-9)
        ko = 2*mt.pi*Sell(l_o,*sello)/(l_o*1E-9)
        ke = 2*mt.pi*neff(l_e,a_c-x[1])/(l_e*1E-9)
        
    A = ke*np.cos(x[1])+ko*np.cos(x[0])-kp
    B = ke*np.sin(x[1])+ko*np.sin(x[0])
    return A,B


ac = np.linspace(0,mt.pi/2,10000) # Optic axis angle
val_1 = []
val_=[]
phi_ = []


for a in range(len(ac)):
    val = np.sum(np.abs(f([0,0],lp,l1,ac[a])))
    val_1.append(val)
    if val<10000:
        val_.append(val)
        phi_.append(ac[a])
        
        
i = np.argmin(val_)
a_c = phi_[i] # Optic axis value that minimize the momentum conservation


#%%
phi_ = np.linspace(0,360,num=1000) # Azimuthal angle

res__=[]

if type_ == 'negative':
    n_p = neff(lp,a_c)
elif type_ == 'positive':
    n_p = Sell(lp,*sello)
     


def d_eff(phi,a_c):  

   if type_=='negative':
        
        X3=np.reshape(X2, (3,3,3), order='C')
        
    
    
        def T2(phi):
            h2=0
            o = np.zeros((3,1))
            o[0] = np.sin(phi)
            o[1] = -np.cos(phi)
    
            e = np.zeros((3,1))
            e[0] = -np.cos(a_c)*np.cos(phi)
            e[1] = -np.cos(a_c)*np.sin(phi)
            e[2] = np.sin(a_c)
            def P(i,j,k):
                ei=e[i]
                ej=e[j]
                ok=o[k]
                dijk= X3[i,j,k]
                t = ei*dijk*ej*ok
                return t

            for a in range(3):
                for b in range(3):
                    for c in range(3):
                        h = P(a,b,c)
                        
                        # print(h)
                        h2=h+h2
            return h2

        Deff = T2(phi)
    
    
   elif type_=='positive':
        X3=np.reshape(X2, (3,3,3), order='C')
        def T2(phi):
            h2=0
            # phi  = phi*mt.pi/180
            o = np.zeros((3,1))
            o[0] = -np.sin(phi)
            o[1] = np.cos(phi)

            e = np.zeros((3,1))
            e[0] = -np.cos(a_c)*np.cos(phi)
            e[1] = -np.cos(a_c)*np.sin(phi)
            e[2] = np.sin(a_c)
            def P(i,j,k):
                oi=o[i]
                ej=e[j]
                ok=o[k]
                dijk= X3[i,j,k]
            
                t = oi*dijk*ej*ok
                return t
            for a in range(3):
                for b in range(3):
                    for c in range(3):
                        h = P(a,b,c)
                        h2=h+h2
            # h2=abs(h2)
            return h2
        Deff = T2(phi)
    
   return Deff

deff = []

for a in range(len(phi_)):
    deff.append(d_eff(phi_[a]*mt.pi/180,a_c))
    
plt.plot(phi_,deff,"-")    
plt.xlabel('$\phi$')
plt.ylabel('$d_{eff}$')
plt.show()    

i = np.argmax(np.abs(deff)) 

phi_opt = phi_[i] # Azimuthal angle that maximize the Deff

theta_opt = a_c * 180/mt.pi

deff_m = np.max(np.abs(deff))  # Maximum Deff  

#%%

""" Calculation of the Glauber correlation function"""

x=sym.symbols('x')
def Sell2(x, A, B1, C1, B2, C2):
        return sym.sqrt(((A)+(((x**2)*B1)/((x**2)-C1))+(((x**2)*B2)/((x**2)-C2))))

def neff2(x,ang):
    no = Sell2(x,*sello)
    ne = Sell2(x,*selle)
    a = np.cos(ang)**2 / (no*no)
    b = np.sin(ang)**2 / (ne*ne)
    nef = sym.sqrt(1/(a+b))
    return nef

def f_e(x,ang):
    a = neff2(x,ang)
    return a
def f_o(x):
    a = Sell2(x,*sello)
    return a


def nge(l1):  # Velocity Dispertion of the extraordinary refrative index
        D = sym.diff(f_e(x,a_c))
        a = f_e(x,a_c)-l1*1E-9*(D)
        a = a.subs(x,l1)
        return a

def ngo(l1):  # Velocity Dispertion of the ordinary refrative index
        D = sym.diff(f_o(x))
        a = f_o(x)-l1*1E-9*(D)
        a = a.subs(x,l1)
        return a



ng_e = nge(l1)
ng_o = ngo(l1)


Dng= abs(ng_e-ng_o)

def I(v,t):
    s = mt.sin((Dng*L/(c*2))*v)
    s = s/((Dng*L/(c*2)*v)) 
    a = np.exp(-v**2/band**2)
    b = np.exp(1j*v*t)
    inte = s*a*b.real
    
    return inte


def Ii(x,t):
    s = mt.sin((Dng*L/(c*2))*x)
    s =  s/((Dng*L/(c*2)*x)) 
    a = np.exp(-x**2/band**2)
    b = np.exp(1j*x*t)
    
    inte = s*a*b.imag
    return inte


vo= float(2*c/(Dng*L))
tl = float(Dng*L/(c*2))*20
tl = tl*vo
vo = vo/vo

tau = np.linspace(-tl,tl,2001)
G2 = []



for a in range(len(tau)):
    I1 = quad(I,-vo+1,vo,args = (tau[a]))[0]
    I2 = quad(Ii,-vo+1,vo,args = (tau[a]))[0]
    i_t = np.sqrt(I1.real**2+I2.real**2)**2

    G2.append(i_t)

f_max = np.max(G2)

tau = tau*Dng*L/(c*4)
plt.plot(tau,G2,"-")
plt.xlabel('t / $t_c$')
plt.ylabel('$G^{(2)}$')
plt.show()




f_max = np.max(G2)

f_2 = f_max/2
val = []
num = []




i = np.argmin(np.abs(G2-f_2))
G2_fwhm= G2[i]
i_=[]

for a in range(len(G2)):
    if abs(G2_fwhm-G2[a])<np.min(G2)/1000:
        i_.append(a)

fwhm = tau[i_[1]]-tau[i_[0]] # Full width at Half Maximum 


print('\n')
print('the value of the FWHM is:', fwhm)



#%%
""" Photon Counting Rate"""

n_e = neff(l1, a_c)
n_o = Sell(l1,*sello)

if n_e > n_o:
    n_1 =n_o
else:
    n_1 = n_e
    
wp = 2*mt.pi*c/  (lp*1E-9*n_p)

f= float(wp/2)

w1 = 2*mt.pi*c/  (l1*1E-9*n_1)

Dng = float(Dng)

Io = lambda h : (w1+h)*(wp-(w1+h))*np.sin((w1+h-wp/2)*(Dng*L/(c*2)))**2/((w1+h-wp/2)*(Dng*L/(c*2)))**2 # Intengral part of the Counting rate
Io1 = quad(Io, -f, f+10)
error = Io1[1] # Error of the numerical intergration
Io1 = Io1[0] # Value of the ingreation

deff_m = deff_m*1E-12*2 # Transform deff to Chi 2



Ep2 = P/(c*eo*mt.pi*n_1*sigma_p**2) 
R1 = Ep2*(deff_m**2)*L*L/(2*mt.pi*c*c)
R2 = ng_e*ng_o/(n_1**4)
R3 = (abs(sigma_p**2/(sigma_1**2 + 2*sigma_p**2)))**2

Rsm = float(R1*R2*R3*Io1) # Photon Counting Rate

print("Dng:")
print(Dng)
print("Rsm:")
print(Rsm)
print('optic axis angle:')
print(a_c*180/mt.pi)
print('deff:')
print(deff_m*1E12/2)
print('phi_max:')
print(phi_opt)
